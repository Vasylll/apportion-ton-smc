#!/usr/bin/env fift -s
"TonUtil.fif" include

{ ."usage: " @' $0 type ." <filename-base> <seq_number> <new_member_address> <new_member_public_key> [<savefile>]" cr
  ."Creates a request to Apportion smart contract to add new member, smc is controlled by <filename-base>.pk, "
  ."and saves it into <savefile>.boc ('apportion-add-member-query.boc' by default)" cr 1 halt
} : usage
$# dup 4 < swap 5 > or ' usage if

"new-apportion" constant file-base
0 constant seq_number
"apportion-code.fif" constant apportion-source
10 constant timeout  // valid for 10 seconds

$1 =: file-base
$2 parse-int =: seq_number
$3 true parse-load-address =: bounce 2=: new_addr
$4 parse-pubkey =: new_pub_key
def? $5 { @' $5 } { "apportion-add-member-query" } cond constant savefile

file-base +".addr" load-address
2dup 2constant apportion_addr
."Apportion smart contract address = " 2dup .addr cr 6 .Addr cr
file-base +".pk" load-keypair nip constant apportion_pk

."Loading new smart contract code from file " apportion-source type cr
"Asm.fif" include
apportion-source include
dup <s csr. cr

// create a message
<b
  x{43665021} s,                    // action
  seq_number 32 u,                  // seqno
  now timeout + 32 u,               // valid_until
  <b 0 256 u, b> ref,               // member_id
  <b new_addr addr, b> ref,         // new member address
  <b new_pub_key 256 u>B B, b> ref, // new member public key
b>
.s
dup ."signing message: " <s csr. cr
dup hashu apportion_pk ed25519_sign_uint
<b b{1000100} s, apportion_addr addr, 0 Gram, b{00} s,
   swap B, swap <s s, b>
dup ."resulting external message: " <s csr. cr
2 boc+>B dup Bx. cr
savefile +".boc" tuck B>file
."(Saved to file " type .")" cr
